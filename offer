import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import requests
from io import BytesIO
import tempfile
import os
import base64
from pptx import Presentation
from pptx.util import Inches
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import make_pipeline
from sklearn.metrics import mean_squared_error, r2_score

st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="expanded"
)

@st.cache_data
def load_data_from_github():
    github_url = "https://github.com/evoluteorburn-lab/HSE_exam_DS16_GusevA/raw/357f3cc05db797cb365a5bd408e5d4784d69ed96/Cian.xlsx"

    try:
        st.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å GitHub...")
        response = requests.get(github_url)
        response.raise_for_status()

        df = pd.read_excel(BytesIO(response.content))
        st.success(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {df.shape}")
        return df

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        st.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        return create_demo_data()

def create_demo_data():
    data = {
        'ID –ö–æ—Ä–ø—É—Å–∞': [1, 2, 3, 4, 5],
        'ID –ñ–ö': [101, 101, 102, 103, 103],
        '–ñ–ö —Ä—É—Å': ['–ñ–ö –ê', '–ñ–ö –ê', '–ñ–ö –ë', '–ñ–ö –í', '–ñ–ö –í'],
        '–ñ–ö –∞–Ω–≥–ª': [None, None, None, None, None],
        '–ö–æ—Ä–ø—É—Å': ['–ö–æ—Ä–ø—É—Å 1', '–ö–æ—Ä–ø—É—Å 2', '–ö–æ—Ä–ø—É—Å 1', '–ö–æ—Ä–ø—É—Å 1', '–ö–æ—Ä–ø—É—Å 2'],
        '–∫—Ä –ö–æ—Ä–ø—É—Å': ['–ö–æ—Ä–ø. 1', '–ö–æ—Ä–ø. 2', '–ö–æ—Ä–ø. 1', '–ö–æ—Ä–ø. 1', '–ö–æ—Ä–ø. 2'],
        '–†–µ–≥–∏–æ–Ω': ['–ú–æ—Å–∫–≤–∞', '–ú–æ—Å–∫–≤–∞', '–°–ü–±', '–ú–æ—Å–∫–≤–∞', '–°–ü–±'],
        '–ú–µ—Ç—Ä–æ': ['–ú–µ—Ç—Ä–æ 1', '–ú–µ—Ç—Ä–æ 2', '–ú–µ—Ç—Ä–æ 3', '–ú–µ—Ç—Ä–æ 1', '–ú–µ—Ç—Ä–æ 3'],
        'ID –∫–≤': [1001, 1002, 1003, 1004, 1005],
        '–î–∞—Ç–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏': [datetime.now()] * 5,
        '–ö–æ–º–Ω–∞—Ç': [1, 2, 3, 1, 2],
        '–ü–ª–æ—â–∞–¥—å': [30.5, 45.2, 60.1, 25.0, 40.0],
        '–¶–µ–Ω–∞': [5000000, 8000000, 12000000, 4000000, 7000000],
        '–¶–µ–Ω–∞ –∫–≤ –º': [int(5000000/30.5), int(8000000/45.2), int(12000000/60.1), int(4000000/25.0), int(7000000/40.0)],
        '–≠—Ç–∞–∂': [5, 8, 3, 2, 7],
        '–ù–æ–º–µ—Ä –Ω–∞ —ç—Ç–∞–∂–µ': [1, 2, 3, 1, 2],
        '–ù–æ–º–µ—Ä –≤ –∫–æ—Ä–ø—É—Å–µ': ['–ê1', '–ë2', '–í3', '–ì4', '–î5'],
        '–ù–æ–º–µ—Ä —Å–µ–∫—Ü–∏–∏': [1, 1, 2, 1, 2],
        '–ê–¥—Ä–µ—Å –∫–æ—Ä–ø': ['–ê–¥—Ä–µ—Å 1', '–ê–¥—Ä–µ—Å 2', '–ê–¥—Ä–µ—Å 3', '–ê–¥—Ä–µ—Å 4', '–ê–¥—Ä–µ—Å 5'],
        'lat': [55.75, 55.78, 59.93, 55.75, 59.93],
        'lng': [37.61, 37.65, 30.32, 37.61, 30.32],
        '–†–∞–π–æ–Ω –ì–æ—Ä–æ–¥': ['–¶–ê–û', '–°–ê–û', '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', '–¶–ê–û', '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π'],
        '–û–∫—Ä—É–≥ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': ['–û–∫—Ä—É–≥ 1', '–û–∫—Ä—É–≥ 2', '–û–∫—Ä—É–≥ 3', '–û–∫—Ä—É–≥ 1', '–û–∫—Ä—É–≥ 3'],
        '–ê–¢–î': ['–ê–¢–î 1', '–ê–¢–î 2', '–ê–¢–î 3', '–ê–¢–î 1', '–ê–¢–î 3'],
        '–ò—Å—Ç–æ—á–Ω–∏–∫': ['–¶–ò–ê–ù'] * 5,
        '–¢–∏–ø –∫–æ—Ä–ø—É—Å–∞': ['–ú–æ–Ω–æ–ª–∏—Ç', '–ü–∞–Ω–µ–ª—å', '–ö–∏—Ä–ø–∏—á', '–ú–æ–Ω–æ–ª–∏—Ç', '–ü–∞–Ω–µ–ª—å'],
        '–ö–ª–∞—Å—Å –ö....': ['–ö–æ–º—Ñ–æ—Ä—Ç', '–ë–∏–∑–Ω–µ—Å', '–ü—Ä–µ–º–∏—É–º', '–≠–∫–æ–Ω–æ–º', '–ö–æ–º—Ñ–æ—Ä—Ç'],
        '–¢–∏–ø –∫–≤/–∞–ø': ['–ö–≤–∞—Ä—Ç–∏—Ä–∞', '–ö–≤–∞—Ä—Ç–∏—Ä–∞', '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã', '–ö–≤–∞—Ä—Ç–∏—Ä–∞', '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã'],
        '–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫': ['–ü–ò–ö', '–°–∞–º–æ–ª–µ—Ç', '–≠—Ç–∞–ª–æ–Ω', '–ü–ò–ö', '–°–∞–º–æ–ª–µ—Ç'],
        '–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è': ['–ö–≤–∞—Ä—Ç–∏—Ä–∞', '–ö–≤–∞—Ä—Ç–∏—Ä–∞', '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã', '–ö–≤–∞—Ä—Ç–∏—Ä–∞', '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã'],
        '–û—Ç–¥–µ–ª–∫–∞ –ø–æ–º–µ—â–µ–Ω–∏—è': ['–î–∞', '–ù–µ—Ç', '–î–∞', '–ù–µ—Ç', '–î–∞'],
        '–û—Ç–¥–µ–ª–∫–∞ –ö': ['–î–∞', '–ù–µ—Ç', '–î–∞', '–ù–µ—Ç', '–î–∞'],
        '–î–æ–≥–æ–≤–æ—Ä –ö': ['–î–î–£', '–≠—Å–∫—Ä–æ—É', '–î–î–£', '–≠—Å–∫—Ä–æ—É', '–î–î–£'],
        '–°–¥–∞—á–∞ –ö': ['2024', '2025', '2024', '2025', '2024'],
        '–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π': [0, 0, 0, 0, 0],
        '–ó–æ–Ω–∞': ['–í –ø—Ä–µ–¥–µ–ª–∞—Ö –¢–¢–ö', '–ó–∞ –ú–ö–ê–î', '–í –ø—Ä–µ–¥–µ–ª–∞—Ö –ö–ê–î', '–í –ø—Ä–µ–¥–µ–ª–∞—Ö –¢–¢–ö', '–í –ø—Ä–µ–¥–µ–ª–∞—Ö –ö–ê–î'],
        '–û—Ç–¥–µ–ª–∫–∞ —Ç–µ–∫—Å—Ç': [None] * 5,
        '–°—Ç–∞—Ä—Ç –ø—Ä–æ–¥–∞–∂ –ö': [2022.0, 2023.0, 2021.0, 2022.0, 2023.0],
        '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–µ–µ': [0, 0, 0, 0, 0],
        '–≠–∫—Å–ø–æ–∑–∏—Ü–∏—è': [10, 15, 20, 5, 12],
        '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã': [100000, 50000, 200000, 10000, 80000]
    }
    return pd.DataFrame(data)


def fit_polynomial_regression(df, x_col, y_col, degree=2, test_size=0.2, random_state=42):

    if x_col not in df.columns or y_col not in df.columns:
        raise ValueError(f"–ö–æ–ª–æ–Ω–∫–∏ {x_col} –∏–ª–∏ {y_col} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö")

    data_clean = df[[x_col, y_col]].dropna()
    if len(data_clean) == 0:
        raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤")

    X = data_clean[[x_col]].values
    y = data_clean[y_col].values

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=test_size, random_state=random_state
    )


    model = make_pipeline(
        PolynomialFeatures(degree, include_bias=False),
        LinearRegression()
    )
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    rmse = np.sqrt(mse)


    lin_reg = model.named_steps['linearregression']
    poly_features = model.named_steps['polynomialfeatures']


    feature_names = poly_features.get_feature_names_out([x_col])
    coeffs = np.concatenate(([lin_reg.intercept_], lin_reg.coef_))

    return model, mse, rmse, r2, coeffs, feature_names

df = load_data_from_github()

if '–ü–ª–æ—â–∞–¥—å' in df.columns:
    df['–ü–ª–æ—â–∞–¥—å'] = df['–ü–ª–æ—â–∞–¥—å'].fillna(df['–ü–ª–æ—â–∞–¥—å'].median())
if '–ö–æ–º–Ω–∞—Ç' in df.columns:
    df['–ö–æ–º–Ω–∞—Ç'] = df['–ö–æ–º–Ω–∞—Ç'].fillna(df['–ö–æ–º–Ω–∞—Ç'].mode()[0] if not df['–ö–æ–º–Ω–∞—Ç'].mode().empty else 2)
if '–≠—Ç–∞–∂' in df.columns:
    df['–≠—Ç–∞–∂'] = df['–≠—Ç–∞–∂'].fillna(df['–≠—Ç–∞–∂'].median())

HAPPY_PEOPLE_IMAGES = [
    "https://t4.ftcdn.net/jpg/04/28/56/41/360_F_428564146_9As0qycLqkWfqycqFgD12pWnXeoxngem.jpg",
    "https://avatars.mds.yandex.net/i?id=679b6d004b22fe95070e15979eb9e51a_l-16493803-images-thumbs&n=13"
]

def download_image(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.content
    except:
        return None

def create_presentation(input_data, filtered_df):
    prs = Presentation()

    price_column = '–¶–µ–Ω–∞ –∫–≤ –º' if '–¶–µ–Ω–∞ –∫–≤ –º' in filtered_df.columns else '–¶–µ–Ω–∞'
    if price_column in filtered_df.columns:
        avg_price = filtered_df[price_column].mean()
        median_price = filtered_df[price_column].median()
    else:
        avg_price = median_price = 0

    count = len(filtered_df)

    slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(slide_layout)
    title = slide.shapes.title
    subtitle = slide.placeholders[1]

    title.text = "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
    subtitle.text = f"–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n{datetime.now().strftime('%d.%m.%Y')}"

    slide_layout = prs.slide_layouts[1]
    slide = prs.slides.add_slide(slide_layout)
    title = slide.shapes.title
    title.text = "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞"

    content = slide.placeholders[1]
    tf = content.text_frame
    tf.text = ""

    for key, value in input_data.items():
        if value is not None:
            if key == '–ö–ª–∞—Å—Å –ö....':
                p = tf.add_paragraph()
                p.text = f"–ö–ª–∞—Å—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã: {value}"
            elif key == '–ü–ª–æ—â–∞–¥—å –æ—Ç' and input_data.get('–ü–ª–æ—â–∞–¥—å –¥–æ'):
                p = tf.add_paragraph()
                p.text = f"–ü–ª–æ—â–∞–¥—å: –æ—Ç {input_data['–ü–ª–æ—â–∞–¥—å –æ—Ç']} –¥–æ {input_data['–ü–ª–æ—â–∞–¥—å –¥–æ']} –º¬≤"
            elif key not in ['–ü–ª–æ—â–∞–¥—å –æ—Ç', '–ü–ª–æ—â–∞–¥—å –¥–æ']:
                p = tf.add_paragraph()
                p.text = f"{key}: {value}"

    slide_layout = prs.slide_layouts[1]
    slide = prs.slides.add_slide(slide_layout)
    title = slide.shapes.title
    title.text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"

    content = slide.placeholders[1]
    tf = content.text_frame
    tf.text = ""

    p = tf.add_paragraph()
    p.text = f"–ù–∞–π–¥–µ–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {count}"
    p = tf.add_paragraph()
    p.text = f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤: {avg_price:,.0f} —Ä—É–±."
    p = tf.add_paragraph()
    p.text = f"–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤: {median_price:,.0f} —Ä—É–±."

    slide_layout = prs.slide_layouts[1]
    slide = prs.slides.add_slide(slide_layout)
    title = slide.shapes.title
    title.text = "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"

    content = slide.placeholders[1]
    tf = content.text_frame
    tf.text = ""

    p = tf.add_paragraph()
    p.text = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"
    p = tf.add_paragraph()
    p.text = "–ú–µ–Ω–µ–¥–∂–µ—Ä: –ì—É—Å–µ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á"
    p = tf.add_paragraph()
    p.text = "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (977) 123-45-67"
    p = tf.add_paragraph()
    p.text = "Email: gusev@realestate.ru"

    with tempfile.NamedTemporaryFile(delete=False, suffix='.pptx') as tmp:
        prs.save(tmp.name)
        with open(tmp.name, 'rb') as f:
            pptx_bytes = f.read()
    os.unlink(tmp.name)

    return pptx_bytes

def get_download_link(file_bytes, filename, text):
    b64 = base64.b64encode(file_bytes).decode()
    return f'<a href="data:application/octet-stream;base64,{b64}" download="{filename}">{text}</a>'

st.title("–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
st.markdown("### –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞")

with st.sidebar:
    st.header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö")
    st.write(f"**–†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞:** {df.shape[0]} –∑–∞–ø–∏—Å–µ–π, {df.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    if '–ö–ª–∞—Å—Å –ö....' in df.columns:
        unique_classes = [str(x) for x in df['–ö–ª–∞—Å—Å –ö....'].unique() if pd.notna(x)]
        st.write(f"**–ö–ª–∞—Å—Å—ã –∫–≤–∞—Ä—Ç–∏—Ä:** {', '.join(unique_classes)}")

    if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π"):
        st.dataframe(df.head())

    if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
        st.write(df.describe())

    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏")
    reg_degree = st.slider("–°—Ç–µ–ø–µ–Ω—å –ø–æ–ª–∏–Ω–æ–º–∞", 1, 5, 2)
    reg_test_size = st.slider("–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏", 0.1, 0.5, 0.2)

col1, col2 = st.columns(2)

with col1:
    st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

    def get_unique_values(column_name, default_options=None):
        if column_name in df.columns and not df[column_name].empty:
            unique_vals = df[column_name].dropna().unique().tolist()
            return sorted([x for x in unique_vals if x is not None and x != ''])
        return default_options if default_options else []

    class_options = get_unique_values('–ö–ª–∞—Å—Å –ö....', ['–≠–∫–æ–Ω–æ–º', '–ö–æ–º—Ñ–æ—Ä—Ç', '–ë–∏–∑–Ω–µ—Å', '–ü—Ä–µ–º–∏—É–º'])
    class_input = st.selectbox('–ö–ª–∞—Å—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã', options=[None] + class_options)

    area_min = st.number_input('–ü–ª–æ—â–∞–¥—å –æ—Ç (–º¬≤)', min_value=0.0, value=0.0)
    area_max = st.number_input('–ü–ª–æ—â–∞–¥—å –¥–æ (–º¬≤)', min_value=0.0, value=0.0)

with col2:
    st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

    rooms_options = get_unique_values('–ö–æ–º–Ω–∞—Ç', [1, 2, 3, 4, 5])
    rooms_input = st.selectbox('–ö–æ–º–Ω–∞—Ç', options=[None] + rooms_options)

    floor_input = st.number_input('–≠—Ç–∞–∂', min_value=0, value=0)

    district_options = get_unique_values('–†–∞–π–æ–Ω –ì–æ—Ä–æ–¥', ['–¶–ê–û', '–°–ê–û', '–Æ–ê–û'])
    district_input = st.selectbox('–†–∞–π–æ–Ω', options=[None] + district_options)

    type_options = get_unique_values('–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è', ['–ö–≤–∞—Ä—Ç–∏—Ä–∞', '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã'])
    type_input = st.selectbox('–¢–∏–ø', options=[None] + type_options)

    builder_options = get_unique_values('–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫', ['–ü–ò–ö', '–°–∞–º–æ–ª–µ—Ç', '–≠—Ç–∞–ª–æ–Ω'])
    builder_input = st.selectbox('–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫', options=[None] + builder_options)

    finish_options = get_unique_values('–û—Ç–¥–µ–ª–∫–∞ –ø–æ–º–µ—â–µ–Ω–∏—è', ['–î–∞', '–ù–µ—Ç'])
    finish_input = st.selectbox('–û—Ç–¥–µ–ª–∫–∞', options=[None] + finish_options)

st.subheader("–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞")

infra_cols = st.columns(5)
infrastructure_options = {}

infrastructure_columns = [
    '–®–∫–æ–ª–∞/–î–µ—Ç—Å–∫–∏–π –°–∞–¥', '–ü–∞—Ä–∫/–ó–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞', '–°–ø–æ—Ä—Ç', '–ü–∞—Ä–∫–æ–≤–∫–∞', '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã'
]

for i, col_name in enumerate(infrastructure_columns):
    if col_name in df.columns:
        options = get_unique_values(col_name, [])
        with infra_cols[i]:
            infrastructure_options[col_name] = st.selectbox(
                col_name,
                options=[None] + options,
                key=f"infra_{col_name}"
            )

col3, col4 = st.columns(2)
with col3:
    confirm_kp = st.checkbox('–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', value=False)
with col4:
    export_pptx = st.checkbox('–í—ã–≥—Ä—É–∑–∏—Ç—å –≤ PPTX', value=False)
    show_regression = st.checkbox('–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑', value=False)
    show_infrastructure = st.checkbox('–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É', value=True)

if st.button('–°—Ä–∞–≤–Ω–∏—Ç—å —Ü–µ–Ω—É', type='primary'):
    input_data = {
        '–ö–ª–∞—Å—Å –ö....': class_input,
        '–ü–ª–æ—â–∞–¥—å –æ—Ç': area_min if area_min > 0 else None,
        '–ü–ª–æ—â–∞–¥—å –¥–æ': area_max if area_max > 0 else None,
        '–ö–æ–º–Ω–∞—Ç': rooms_input,
        '–≠—Ç–∞–∂': floor_input if floor_input > 0 else None,
        '–†–∞–π–æ–Ω –ì–æ—Ä–æ–¥': district_input,
        '–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è': type_input,
        '–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫': builder_input,
        '–û—Ç–¥–µ–ª–∫–∞ –ø–æ–º–µ—â–µ–Ω–∏—è': finish_input
    }

    for col_name, value in infrastructure_options.items():
        input_data[col_name] = value

    filtered_df = df.copy()

    for key, value in input_data.items():
        if value is not None and key in filtered_df.columns:
            if key == '–ü–ª–æ—â–∞–¥—å –æ—Ç':
                filtered_df = filtered_df[filtered_df['–ü–ª–æ—â–∞–¥—å'] >= value]
            elif key == '–ü–ª–æ—â–∞–¥—å –¥–æ':
                filtered_df = filtered_df[filtered_df['–ü–ª–æ—â–∞–¥—å'] <= value]
            elif key in ['–ö–æ–º–Ω–∞—Ç', '–≠—Ç–∞–∂']:
                filtered_df = filtered_df[filtered_df[key] == value]
            else:
                filtered_df = filtered_df[filtered_df[key] == value]

    if len(filtered_df) == 0:
        st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")
        st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞")
    else:
        price_column = '–¶–µ–Ω–∞ –∫–≤ –º' if '–¶–µ–Ω–∞ –∫–≤ –º' in filtered_df.columns else '–¶–µ–Ω–∞'
        if price_column not in filtered_df.columns:
            st.error("–ö–æ–ª–æ–Ω–∫–∞ —Å —Ü–µ–Ω–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö!")
            st.stop()

        class_avg_price = filtered_df[price_column].mean()
        class_median_price = filtered_df[price_column].median()

        st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤", len(filtered_df))
        with col2:
            st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤", f"{class_avg_price:,.0f} —Ä—É–±.")
        with col3:
            st.metric("–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞", f"{class_median_price:,.0f} —Ä—É–±.")

        fig, ax = plt.subplots(figsize=(10, 6))
        sns.histplot(filtered_df[price_column], kde=True, ax=ax)
        ax.set_xlabel('–¶–µ–Ω–∞ –∑–∞ –º¬≤ (—Ä—É–±.)')
        ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤ –≤—ã–±–æ—Ä–∫–µ')
        st.pyplot(fig)

        st.subheader("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã")

        display_columns = ['–ü–ª–æ—â–∞–¥—å', '–ö–æ–º–Ω–∞—Ç', '–≠—Ç–∞–∂', '–†–∞–π–æ–Ω –ì–æ—Ä–æ–¥', '–¶–µ–Ω–∞ –∫–≤ –º']
        if '–ö–ª–∞—Å—Å –ö....' in filtered_df.columns:
            display_columns.insert(0, '–ö–ª–∞—Å—Å –ö....')

        if show_infrastructure:
            for col in infrastructure_columns:
                if col in filtered_df.columns:
                    display_columns.append(col)

        st.dataframe(
            filtered_df[display_columns].rename(columns={
                '–ö–ª–∞—Å—Å –ö....': '–ö–ª–∞—Å—Å',
                '–†–∞–π–æ–Ω –ì–æ—Ä–æ–¥': '–†–∞–π–æ–Ω',
                '–¶–µ–Ω–∞ –∫–≤ –º': '–¶–µ–Ω–∞ –∑–∞ –º¬≤'
            }).style.format({
                '–¶–µ–Ω–∞ –∑–∞ –º¬≤': '{:,.0f} —Ä—É–±.',
                '–ü–ª–æ—â–∞–¥—å': '{:.1f} –º¬≤'
            }),
            height=300
        )

        if show_regression and len(filtered_df) > 10:
            st.markdown("---")
            st.subheader("–ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è")

            try:
                model, mse, rmse, r2, coeffs, feature_names = fit_polynomial_regression(
                    filtered_df, '–ü–ª–æ—â–∞–¥—å', price_column,
                    degree=reg_degree, test_size=reg_test_size
                )

                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("MSE", f"{mse:,.0f}")
                with col2:
                    st.metric("RMSE", f"{rmse:,.0f}")
                with col3:
                    st.metric("R¬≤", f"{r2:.3f}")

                fig2, ax2 = plt.subplots(figsize=(10, 6))

                X_plot = np.linspace(filtered_df['–ü–ª–æ—â–∞–¥—å'].min(), filtered_df['–ü–ª–æ—â–∞–¥—å'].max(), 100).reshape(-1, 1)
                y_plot = model.predict(X_plot)

                ax2.scatter(filtered_df['–ü–ª–æ—â–∞–¥—å'], filtered_df[price_column], alpha=0.6, label='–î–∞–Ω –¥–∞–Ω–Ω—ã–µ–Ω—ã–µ')
                ax2.plot(X_plot, y_plot, color='red', linewidth=2, label=f'–ü–æ–ª–∏–Ω–æ–º {reg_degree} —Å—Ç–µ–ø–µ–Ω–∏')

                ax2.set_xlabel('–ü–ª–æ—â–∞–¥—å (–º¬≤)')
                ax2.set_ylabel('–¶–µ–Ω–∞ –∑–∞ –º¬≤ (—Ä—É–±.)')
                ax2.set_title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç –ø–ª–æ—â–∞–¥–∏')
                ax2.legend()
                ax2.grid(True, alpha=0.3)

                st.pyplot(fig2)

            except Exception as e:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—É—é –º–æ–¥–µ–ª—å: {e}")

        if confirm_kp:
            st.markdown("---")
            st.subheader("–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")

            manager_name = "–ì—É—Å–µ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á"
            manager_phone = "+7 (977) 123-45-67"

            st.info(f"""
            **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}

            {f"- –ö–ª–∞—Å—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã: {class_input}" if class_input else ""}
            {f"- –ü–ª–æ—â–∞–¥—å: –æ—Ç {area_min} –¥–æ {area_max} –º¬≤" if area_min > 0 and area_max > 0 else ""}
            {f"- –ö–æ–º–Ω–∞—Ç: {rooms_input}" if rooms_input else ""}
            {f"- –†–∞–π–æ–Ω: {district_input}" if district_input else ""}

            - –ù–∞–π–¥–µ–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(filtered_df)}
            - –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤: {class_avg_price:,.0f} —Ä—É–±.
            - –ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {class_median_price:,.0f} —Ä—É–±.

            - {manager_name}
            - üìû {manager_phone}
            - ‚úâÔ∏è gusev@realestate.ru
            """)

        if export_pptx:
            try:
                pptx_bytes = create_presentation(input_data, filtered_df)
                st.markdown(get_download_link(pptx_bytes, "commercial_offer.pptx", "üìé –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é"), unsafe_allow_html=True)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {e}")

st.markdown("---")
st.caption("¬© 2024 –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ | –ú–µ–Ω–µ–¥–∂–µ—Ä: –ì—É—Å–µ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á +7 (977) 123-45-67")
