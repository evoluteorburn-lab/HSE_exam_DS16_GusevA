def show_polynomial_regression():
    if not SKLEARN_AVAILABLE:
        st.error("–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ scikit-learn.")
        return
        
    st.header("üìà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ 2026 –≥–æ–¥")
    
    st.info("""
    –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Å—Ç—Ä–æ–∏—Ç—Å—è –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ –º¬≤ 
    –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤. –ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö.
    """)
    
    use_filtered = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏–∑ –ø–æ–∏—Å–∫–∞", 
                              value=st.session_state.filtered_apartments is not None,
                              disabled=st.session_state.filtered_apartments is None)
    
    if use_filtered and st.session_state.filtered_apartments is not None:
        analysis_data = st.session_state.filtered_apartments
        st.info(f"–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(analysis_data)} –∫–≤–∞—Ä—Ç–∏—Ä")
    else:
        analysis_data = data
        st.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ")
    
    numeric_cols = analysis_data.select_dtypes(include=['int64', 'float64']).columns.tolist()
    categorical_cols = analysis_data.select_dtypes(include=['object']).columns.tolist()
    
    target_col = st.selectbox("–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (y):", 
                             options=['–¶–µ–Ω–∞ –∫–≤ m', '–¶–µ–Ω–∞'],
                             index=0)
    
    if target_col not in analysis_data.columns:
        st.error(f"–ö–æ–ª–æ–Ω–∫–∞ '{target_col}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö!")
        return
    
    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∫–∞–∫ –≤—ã —É–∫–∞–∑–∞–ª–∏
    fixed_features = [
        '–®–∫–æ–ª–∞/–î–µ—Ç—Å–∫–∏–π –°–∞–¥', 
        '–ü–∞—Ä–∫/–ó–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞', 
        '–°–ø–æ—Ä—Ç', 
        '–ü–∞—Ä–∫–æ–≤–∫–∞', 
        '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã', 
        '–ö–æ–º–Ω–∞—Ç', 
        '–ü–ª–æ—â–∞–¥—å',
        '–≠—Ç–∞–∂', 
        '–†–∞–π–æ–Ω –ì–æ—Ä–æ–¥', 
        '–ö–ª–∞—Å—Å –ö....', 
        '–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫'
    ]
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
    available_features = [col for col in fixed_features if col in analysis_data.columns]
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.write("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:")
        st.write(", ".join(available_features))
    
    if not available_features:
        st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
        return
    
    temp_data = analysis_data[available_features + [target_col]].copy()
    initial_count = len(temp_data)
    temp_data = temp_data.dropna()
    final_count = len(temp_data)
    
    if final_count == 0:
        st.error("""
        ‚ùå –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–∞–Ω–Ω—ã—Ö!
        
        **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
        1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö.
        """)
        return
    
    st.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {final_count} –∏–∑ {initial_count} –∑–∞–ø–∏—Å–µ–π (—É–¥–∞–ª–µ–Ω–æ {initial_count - final_count} –∑–∞–ø–∏—Å–µ–π —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏)")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        degree = st.slider("–°—Ç–µ–ø–µ–Ω—å –ø–æ–ª–∏–Ω–æ–º–∞", 1, 5, 2)
    with col2:
        test_size = st.slider("–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏", 0.1, 0.5, 0.3)
    with col3:
        random_state = st.number_input("Random state", 0, 100, 42)
    
    if st.button("–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", type='primary'):
        try:
            X = temp_data[available_features].copy()
            y = temp_data[target_col]
            
            numeric_features = X.select_dtypes(include=['int64', 'float64']).columns.tolist()
            categorical_features = X.select_dtypes(include=['object']).columns.tolist()
            
            numeric_transformer = Pipeline(steps=[
                ('imputer', SimpleImputer(strategy='median')),
                ('scaler', StandardScaler())
            ])
            
            categorical_transformer = Pipeline(steps=[
                ('imputer', SimpleImputer(strategy='most_frequent')),
                ('onehot', OneHotEncoder(handle_unknown='ignore', sparse_output=False))
            ])
            
            preprocessor = ColumnTransformer(
                transformers=[
                    ('num', numeric_transformer, numeric_features),
                    ('cat', categorical_transformer, categorical_features)
                ])
            
            full_pipeline = Pipeline(steps=[
                ('preprocessor', preprocessor),
                ('poly', PolynomialFeatures(degree=degree, include_bias=False))
            ])
            
            X_processed = full_pipeline.fit_transform(X)
            
            X_train, X_test, y_train, y_test = train_test_split(
                X_processed, y, test_size=test_size, random_state=random_state
            )
            
            model = LinearRegression()
            model.fit(X_train, y_train)
            
            y_pred = model.predict(X_test)
            
            mae = mean_absolute_error(y_test, y_pred)
            mse = mean_squared_error(y_test, y_pred)
            rmse = np.sqrt(mse)
            r2 = r2_score(y_test, y_pred)
            
            st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
            
            st.session_state.trained_model = model
            st.session_state.model_pipeline = full_pipeline
            st.session_state.model_features = available_features
            st.session_state.target_column = target_col
            
            all_predictions = model.predict(full_pipeline.transform(X))
            
            forecast_df = analysis_data.loc[X.index, ['–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã'] + available_features].copy()
            forecast_df['–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞'] = y
            forecast_df['–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 2026 –≥–æ–¥'] = all_predictions
            forecast_df['–ò–∑–º–µ–Ω–µ–Ω–∏–µ, %'] = ((forecast_df['–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 2026 –≥–æ–¥'] - forecast_df['–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞']) / 
                                         forecast_df['–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞'] * 100)
            
            st.subheader("üìä –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–∞ 2026 –≥–æ–¥")
            st.dataframe(
                forecast_df.style.format({
                    '–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞': '{:,.0f}',
                    '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 2026 –≥–æ–¥': '{:,.0f}',
                    '–ò–∑–º–µ–Ω–µ–Ω–∏–µ, %': '{:.1f}%'
                }),
                height=400
            )
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("R¬≤ Score", f"{r2:.3f}")
            with col2:
                st.metric("RMSE", f"{rmse:.2f}")
            with col3:
                st.metric("MAE", f"{mae:.2f}")
            with col4:
                st.metric("–û–±—É—á–µ–Ω–æ –Ω–∞", f"{len(X_train)} samples")
            
            if MATPLOTLIB_AVAILABLE:
                fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))
                
                ax1.scatter(y_test, y_pred, alpha=0.5)
                ax1.plot([y.min(), y.max()], [y.min(), y.max()], 'r--', lw=2)
                ax1.set_xlabel('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è')
                ax1.set_ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
                ax1.set_title('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ vs –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
                
                residuals = y_test - y_pred
                ax2.scatter(y_pred, residuals, alpha=0.5)
                ax2.axhline(y=0, color='r', linestyle='--')
                ax2.set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
                ax2.set_ylabel('–û—Å—Ç–∞—Ç–∫–∏')
                ax2.set_title('–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤')
                
                plt.tight_layout()
                st.pyplot(fig)
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
